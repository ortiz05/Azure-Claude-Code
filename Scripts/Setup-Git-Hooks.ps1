# Setup-Git-Hooks.ps1
# Script to configure Git hooks for PowerShell validation

[CmdletBinding()]
param(
    [Parameter(Mandatory = $false)]
    [switch]$Force,
    
    [Parameter(Mandatory = $false)]
    [switch]$Remove
)

Write-Host "=========================================" -ForegroundColor Cyan
Write-Host "Git Hooks Setup for PowerShell Validation" -ForegroundColor Cyan
Write-Host "=========================================" -ForegroundColor Cyan

# Check if we're in a Git repository
try {
    $GitRoot = git rev-parse --show-toplevel 2>$null
    if (-not $GitRoot) {
        throw "Not in a Git repository"
    }
    Write-Host "Git Repository: $GitRoot" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå Error: This script must be run from within a Git repository" -ForegroundColor Red
    exit 1
}

# Define paths
$GitHooksDir = Join-Path $GitRoot ".git\hooks"
$PreCommitHookPath = Join-Path $GitHooksDir "pre-commit"
$PreCommitScriptPath = Join-Path $GitRoot "Scripts\Pre-Commit-Hook.ps1"

Write-Host "Git Hooks Directory: $GitHooksDir" -ForegroundColor Yellow
Write-Host "Pre-Commit Hook Path: $PreCommitHookPath" -ForegroundColor Yellow

# Remove hooks if requested
if ($Remove) {
    Write-Host "`nRemoving Git hooks..." -ForegroundColor Yellow
    
    if (Test-Path $PreCommitHookPath) {
        Remove-Item $PreCommitHookPath -Force
        Write-Host "‚úì Removed pre-commit hook" -ForegroundColor Green
    } else {
        Write-Host "‚úì Pre-commit hook was not installed" -ForegroundColor Gray
    }
    
    Write-Host "`nüóëÔ∏è Git hooks removed successfully!" -ForegroundColor Green
    exit 0
}

# Check if validation script exists
if (-not (Test-Path $PreCommitScriptPath)) {
    Write-Host "‚ùå Pre-commit validation script not found: $PreCommitScriptPath" -ForegroundColor Red
    Write-Host "Please ensure the Scripts directory contains Pre-Commit-Hook.ps1" -ForegroundColor Yellow
    exit 1
}

# Check if hooks directory exists
if (-not (Test-Path $GitHooksDir)) {
    Write-Host "‚ùå Git hooks directory not found: $GitHooksDir" -ForegroundColor Red
    Write-Host "This may indicate an issue with your Git repository setup" -ForegroundColor Yellow
    exit 1
}

# Check if pre-commit hook already exists
if (Test-Path $PreCommitHookPath) {
    if (-not $Force) {
        Write-Host "‚ö†Ô∏è Pre-commit hook already exists!" -ForegroundColor Yellow
        Write-Host "Current content:" -ForegroundColor Cyan
        Get-Content $PreCommitHookPath | ForEach-Object { Write-Host "  $_" -ForegroundColor Gray }
        Write-Host "`nUse -Force to overwrite or -Remove to uninstall" -ForegroundColor Yellow
        exit 1
    } else {
        Write-Host "‚ö†Ô∏è Overwriting existing pre-commit hook..." -ForegroundColor Yellow
    }
}

# Create the pre-commit hook
Write-Host "`nInstalling pre-commit hook..." -ForegroundColor Yellow

# Hook content that calls our PowerShell script
$HookContent = @"
#!/bin/sh
# Git pre-commit hook for PowerShell validation
# Auto-generated by Setup-Git-Hooks.ps1

echo "Running PowerShell validation..."

# Check if PowerShell is available
if command -v pwsh >/dev/null 2>&1; then
    POWERSHELL_CMD="pwsh"
elif command -v powershell >/dev/null 2>&1; then
    POWERSHELL_CMD="powershell"
else
    echo "‚ùå PowerShell not found. Please install PowerShell Core (pwsh) or Windows PowerShell."
    echo "Skipping PowerShell validation..."
    exit 0
fi

# Get the repository root
REPO_ROOT=`$(git rev-parse --show-toplevel)`

# Run the PowerShell validation script
`$POWERSHELL_CMD -ExecutionPolicy Bypass -File "`$REPO_ROOT/Scripts/Pre-Commit-Hook.ps1"

# Exit with the validation script's exit code
exit `$?
"@

try {
    # Write the hook content
    $HookContent | Out-File -FilePath $PreCommitHookPath -Encoding ASCII -NoNewline
    
    # Make the hook executable (if on Unix-like system)
    if ($IsLinux -or $IsMacOS) {
        chmod +x $PreCommitHookPath
    }
    
    Write-Host "‚úì Pre-commit hook installed successfully!" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå Failed to install pre-commit hook: $_" -ForegroundColor Red
    exit 1
}

# Test the hook installation
Write-Host "`nTesting hook installation..." -ForegroundColor Yellow

try {
    # Check if the hook file is readable
    $HookTest = Get-Content $PreCommitHookPath -Raw
    if ($HookTest -match "PowerShell validation") {
        Write-Host "‚úì Hook content verified" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è Hook content may not be correct" -ForegroundColor Yellow
    }
    
    # Test PowerShell availability
    $PowerShellTest = Get-Command pwsh -ErrorAction SilentlyContinue
    if ($PowerShellTest) {
        Write-Host "‚úì PowerShell Core (pwsh) is available" -ForegroundColor Green
    } else {
        $PowerShellTest = Get-Command powershell -ErrorAction SilentlyContinue
        if ($PowerShellTest) {
            Write-Host "‚úì Windows PowerShell is available" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è PowerShell not found - hook will skip validation" -ForegroundColor Yellow
        }
    }
}
catch {
    Write-Host "‚ö†Ô∏è Hook test failed: $_" -ForegroundColor Yellow
}

# Display summary
Write-Host "`n=========================================" -ForegroundColor Cyan
Write-Host "Installation Summary" -ForegroundColor Cyan
Write-Host "=========================================" -ForegroundColor Cyan
Write-Host "‚úÖ Pre-commit hook installed successfully!" -ForegroundColor Green
Write-Host "`nWhat happens now:" -ForegroundColor Cyan
Write-Host "‚Ä¢ Every commit will automatically validate PowerShell scripts" -ForegroundColor White
Write-Host "‚Ä¢ Commits will be blocked if validation fails" -ForegroundColor White
Write-Host "‚Ä¢ Use 'git commit --no-verify' to bypass validation if needed" -ForegroundColor White
Write-Host "`nTo test the hook:" -ForegroundColor Cyan
Write-Host "1. Make changes to a PowerShell script" -ForegroundColor White
Write-Host "2. Stage the changes: git add *.ps1" -ForegroundColor White
Write-Host "3. Attempt to commit: git commit -m 'test commit'" -ForegroundColor White
Write-Host "`nTo uninstall the hook:" -ForegroundColor Cyan
Write-Host "  pwsh -File Setup-Git-Hooks.ps1 -Remove" -ForegroundColor Gray
Write-Host "`nFor more information, see the SECURITY.md file." -ForegroundColor Gray

Write-Host "`nüéâ Git hooks setup completed!" -ForegroundColor Green